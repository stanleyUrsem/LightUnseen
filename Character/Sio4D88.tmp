[gd_scene load_steps=32 format=3 uid="uid://cy7fitk5e2igo"]

[ext_resource type="Script" path="res://Character/SionMovement.gd" id="1_6msgt"]
[ext_resource type="Material" uid="uid://ced4lpkaxd2tl" path="res://Character/eye_trackin_mat.tres" id="2_0sc1b"]
[ext_resource type="Texture2D" uid="uid://br7u3fpkb7c2f" path="res://Character/Textures/SionTD/eyes.png" id="3_atfj3"]
[ext_resource type="Script" path="res://MouseToShader.gd" id="4_m734i"]
[ext_resource type="Texture2D" uid="uid://donk4eeujo6qo" path="res://Character/Textures/SionTD/sion.png" id="5_mwf2f"]
[ext_resource type="AnimationLibrary" uid="uid://c1k2kc7247equ" path="res://Character/Sion_2_anim_lib.tres" id="6_o8mu2"]
[ext_resource type="AnimationNodeBlendTree" uid="uid://cgvcqonlcymq2" path="res://Character/Textures/SionTD/topdownChar.tres" id="7_uuyot"]
[ext_resource type="Script" path="res://Hittable.gd" id="10_tav8q"]
[ext_resource type="Script" path="res://Character/StatsHolder.gd" id="13_ip521"]
[ext_resource type="Script" path="res://StatsResource.gd" id="15_h1vve"]
[ext_resource type="Script" path="res://Character/Interact.gd" id="15_mg06p"]
[ext_resource type="Script" path="res://PassivesManager.gd" id="16_dvdfg"]
[ext_resource type="Texture2D" uid="uid://cgt4u6x0ednng" path="res://Envo/pickups.png" id="16_qym2e"]
[ext_resource type="Script" path="res://Abilities/AbilityData.gd" id="17_5mfga"]
[ext_resource type="Script" path="res://Abilities/PassiveData.gd" id="17_r5jsg"]
[ext_resource type="PackedScene" uid="uid://d3own3do3t3k" path="res://Character/manaheal.tscn" id="18_4wnpx"]
[ext_resource type="Script" path="res://Character/Consume.gd" id="18_il7wj"]
[ext_resource type="Material" uid="uid://dlo3kh48c6xhw" path="res://Maps/Particles.tres" id="19_26564"]

[sub_resource type="Curve" id="Curve_lstxf"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.5, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="Curve" id="Curve_j4n5k"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.503311, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ygxu6"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_irf28"]
size = Vector2(6, 18)

[sub_resource type="GDScript" id="GDScript_oopf3"]
script/source = "extends Node2D

class_name AbilityManager

@export var interact : Interact
@export var charMovement : CharacterMovement
@export var abilityData : Array[AbilityData]
@export var abilitySpawns : Array[Marker2D]
@export var mouseHandler : MouseHandler
@export var timer_duration : float
@export var movement_duration : float
@export var dist_multiplier : float
@export var move_curve : Curve
@export var mouse_direction : Vector2
@export var statsHolder : StatsHolder

var amount_abilities : int
#var abilities : Array[Ability]
var abilities  : Dictionary
var current_combo : Array[String]
var timer : float
var timer_started : bool
var move_player_tween : Tween
var prng : PRNG
var hotkeyManager : HotkeyManager
var eventsManager : EventsManager
var current_hold
var loaded : bool = false
#Index / activation (0 = off, 1 = on)
var toggles_active : Dictionary

var animChar: AnimatableCharacter:
	get: 
		return charMovement.animChar

func _ready():
	prng = PRNG.new(93132)
	hotkeyManager = get_node(\"/root/MAIN/HUD/Node2D/H/HotkeyContainer\")
	eventsManager = get_node(\"/root/MAIN/EventsManager\")
	setupAbilities()
	mouseHandler = get_parent().get_parent().get_node(\"Camera2D\")
	current_hold = null
	loaded = true
	print(mouseHandler)

func setupAbilities():
	hotkeyManager.destroy_current_hotkeys()
	for i in abilityData.size():
		var a = Ability.new()
		var data = abilityData[i]
		a.setup(data)
		abilities[data.hotkey_index] = a
		#abilities.append(a)
		hotkeyManager.create_hotkey(data)
		
func add_data(data):
	abilityData.append(data)
func add_ability(data):
	var a = Ability.new()
	a.setup(data)
	abilities[data.hotkey_index] = a
	abilityData.append(data)
	hotkeyManager.create_hotkey(data)
func _physics_process(delta):
	interact.update_input()
	useAbilities()
	if(timer > 0):
		timer -= (delta)
	
	if(timer <= 0 && timer_started):
		print(\"Time is up\")
		timer_started = false
		timer = 0
		current_combo.clear()
	
func to_degrees(radians) -> float:
	return radians * 180.0 / PI;
	
func get_angle(point, center)-> float:
	var delta = (point - center).normalized()
	var relPoint = delta
	var rad = atan2(relPoint.y, relPoint.x)
	var degrees = to_degrees(rad)
	print(\"Angle: %d\\nRad: %d\\nDelta: %v\" % [degrees,rad,delta])
	return degrees
func set_velocity(x,velocity):
	var new_velocity = Vector2.ZERO.lerp(velocity,move_curve.sample(x))
	print(\"\\nx: %f\\nvelo: %v\\nnew velo: %v\" % [x,velocity,new_velocity])
	charMovement.apply_velocity(new_velocity)

func move_player(dist: float, direction: Vector2):
	var mouse_direction = mouseHandler.mouseGlobalPos - charMovement.global_position
	if(move_player_tween != null && move_player_tween.is_valid()):
		move_player_tween.kill()
		return;
		
		
	var dir = snapped(mouse_direction.normalized() * direction, Vector2(0.15,0.15))
	print(\"Direction: \",dir)	
	move_player_tween = get_tree().create_tween()
	#rollTween.set_trans(Tween.TRANS_EXPO)
	#rollTween.set_ease(Tween.EASE_IN_OUT )
	move_player_tween.tween_method(set_velocity.bind(dir * dist* dist_multiplier),0.0,1.0,movement_duration)
	#move_player_tween.tween_callback(reset_velocity)
	#charMovement._setVelocity(direction.normalized() * dist)
	
#func test_mouse():
#	var root = get_parent()
#	lineMarker.set_point_position(0,root.to_global(root.position))
#	lineMarker.set_point_position(1, _GetMouseDirection(root))

func rotate_sprite_to_mouse(path: String, offset_degrees: float):
	var sprite = get_parent().get_node(path)
	sprite.rotation_degrees = get_angle(get_parent().global_position,
	mouseHandler.mouseGlobalPos) + offset_degrees
	if(charMovement.animChar.turnCurrent > 0):
		sprite.rotation_degrees += 0.0
	
func reset_rotation(path:String):
	var sprite = get_parent().get_node(path)
	sprite.rotation = 0.0
		
		
		
func check_for_combo(combo_array) -> bool:
	##No combo
	if(combo_array.size() <= 1):
		if(Input.is_action_just_pressed(combo_array[0])):
			return true
		
	
	#if(combo_array.size() == current_combo.size()):
	var same_strings = 0
	for i in current_combo.size():
		if(i >= combo_array.size()):
			break
		if(current_combo[i] == combo_array[i]):
			same_strings += 1
			
	if(same_strings == combo_array.size()):
		print(\"Combo succeeded\")
		current_combo.clear()
		return true
		
	var start_index = 0
	#Set index to on going size
	#if(current_combo.size() > 0):
	start_index = current_combo.size()
	if((combo_array.size()) <= start_index):
		return false
	
		
	#Go for start index
	if(Input.is_action_just_pressed(combo_array[start_index])):
		current_combo.append(combo_array[start_index])
		print(\"%s is pressed\\nCount:%d\" % [combo_array[start_index],start_index])
		timer = timer_duration
		timer_started = true
		#combo_timer.start()
	return false
func create_ability(data : AbilityData,activate = true):
	if(activate):
		eventsManager.OnSkillUsed.emit(data)
		
		
	var toggle_suffix = \"\"
	var toggle_value : int = 0
	if(data.hold):
		current_hold = data
	if(data.toggle):
		var toggled = hotkeyManager.toggles[data.displayName] 
		toggle_suffix = \"Off\" if toggled else \"On\"
		toggles_active[data] = !toggled
		toggle_value = 0 if toggled else 1
		hotkeyManager.toggle_pressed.emit(data.displayName)
		
	var blend_add_value = data.value + toggle_value if activate else 0
	var one_shot = data.oneShot if activate else AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT
	
	match(data.animNodeType):
		data.AnimationNodeType.ONESHOT:
			AnimatorHelper._playanimTreeOneShot(animChar._animator,
			data.animName + toggle_suffix,one_shot)
		data.AnimationNodeType.BLEND:
			AnimatorHelper._playanimTreeBlend2D(animChar._animator,
			data.animName,blend_add_value)
		data.AnimationNodeType.ADD:
			AnimatorHelper._playanimTreeAdd2D(animChar._animator,
			data.animName,blend_add_value)
	
func useAbilities():
	if(current_hold != null):
		var keybind = current_hold.keyBinds[current_hold.hold_index]
		var mana_check = statsHolder.stats.mana > abs(current_hold.mana)
		if(Input.is_action_just_released(keybind) && mana_check):
			create_ability(current_hold,false)
			current_hold = null
	#Change abilities to dictionary with hotkey index
	for hotkey_index in abilities:
		var ability = abilities[hotkey_index]
		var data = ability.data
		var combo_check = ability.isSetup && check_for_combo(data.keyBinds)
		var mana_check = statsHolder.stats.mana > abs(data.mana)
		var toggle_check = toggles_active.has(data) && toggles_active[data] == true
		
		if(combo_check):
			if(toggle_check):
				create_ability(data)
				continue
			if(mana_check):
				create_ability(data)
			#if(data.useOneShot):
			#else:


			


func useAbility(index: int, locationIndex: int, direction: Vector2):
	#Use hotkey_index for accessing the ability and its data
	var data = abilities[index].data
	print(\"Using ability %d %s\" % [index,data.displayName])
	#var data = abilityData[index]
	var mana_check = statsHolder.stats.mana > abs(data.mana)
	
	if(data.toggle):
		if(mana_check):
			eventsManager.OnSkillUsed.emit(data)
		else:
			create_ability(data)
			return
		
	if(data.hold):
		if(mana_check):
			eventsManager.OnSkillUsed.emit(data)
		else:
			create_ability(current_hold,false)
			current_hold = null
			return
			
	var location = abilitySpawns[locationIndex]
	abilities[index].use(get_tree().root.get_child(0),
	location.global_position,
	get_parent(), mouseHandler, direction,prng)

#func createAbilities(data, ability):
#	if(data.useOneShot):
#		AnimatorHelper._playanimTreeOneShot(animChar._animator,
#		data.animName,data.oneShot)
#	else:
#		AnimatorHelper._playanimTreeBlend2D(animChar._animator,
#		data.animName,data.value)
#	ability.use(get_tree().root.get_child(0))

"

[sub_resource type="Resource" id="Resource_2frdm"]
script = ExtResource("15_h1vve")
health = 100.0
mana = 50.0
defense = 1.0
stamina = 1.0

[sub_resource type="Resource" id="Resource_60owp"]
script = ExtResource("17_r5jsg")
has_condition = true
delay = 2.0
damage_increase = 0.0
damage_increase_percentage = 0.0
health_increase = 0.0
health_increase_percentage = 0.0
mana_increase = 0.25
mana_increase_percentage = 5.0
defense_increase = 0.0
defense_increase_percentage = 0.0
displayName = "Mana Heal"
description = ""
form_type = 0

[sub_resource type="AtlasTexture" id="AtlasTexture_bjtvb"]
atlas = ExtResource("16_qym2e")
region = Rect2(32, 0, 32, 32)

[sub_resource type="Resource" id="Resource_cwwi8"]
script = ExtResource("17_5mfga")
keyBinds = Array[String](["Interact"])
abilityPath = ""
animName = ""
animNodeType = 0
oneShot = 0
value = 0.0
animOnly = false
damage = 0.0
mana = 0.0
speed = 0.0
useMouseAim = false
toggle = false
hold = false
hold_index = 0
hotkey_index = 2
rotateToMouse = false
displayName = "Interact"
description = ""
icon = SubResource("AtlasTexture_bjtvb")
form_type = 0

[sub_resource type="AtlasTexture" id="AtlasTexture_a7o75"]
atlas = ExtResource("16_qym2e")
region = Rect2(64, 0, 32, 32)

[sub_resource type="Resource" id="Resource_ugs33"]
script = ExtResource("17_5mfga")
keyBinds = Array[String](["Consume_1"])
abilityPath = ""
animName = ""
animNodeType = 0
oneShot = 0
value = 0.0
animOnly = false
damage = 15.0
mana = 4.0
speed = 0.0
useMouseAim = false
toggle = false
hold = false
hold_index = 0
hotkey_index = 0
rotateToMouse = false
displayName = "Consume_HP"
description = ""
icon = SubResource("AtlasTexture_a7o75")
form_type = 4

[sub_resource type="AtlasTexture" id="AtlasTexture_lk1xm"]
atlas = ExtResource("16_qym2e")
region = Rect2(32, 32, 32, 32)

[sub_resource type="Resource" id="Resource_nejrd"]
script = ExtResource("17_5mfga")
keyBinds = Array[String](["Consume_2"])
abilityPath = ""
animName = ""
animNodeType = 0
oneShot = 0
value = 0.0
animOnly = false
damage = 20.0
mana = 5.0
speed = 0.0
useMouseAim = false
toggle = false
hold = false
hold_index = 0
hotkey_index = 1
rotateToMouse = false
displayName = "Consume_MP"
description = ""
icon = SubResource("AtlasTexture_lk1xm")
icon_mat = ExtResource("19_26564")
form_type = 4

[node name="Sion" type="CharacterBody2D" node_paths=PackedStri